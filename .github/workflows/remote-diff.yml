name: Remote → Migration PR

on:
  workflow_dispatch: {}

jobs:
  diff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Supabase CLI
        run: npm i -g supabase

      - name: Link Supabase
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: supabase link --project-ref "$SUPABASE_PROJECT_REF"

      - name: Create directories
        run: mkdir -p supabase/migrations

      - name: Diff to migration
        run: supabase db diff --schema public --linked -f supabase/migrations

      - name: Check for migration files
        id: check_migrations
        run: |
          if git status --porcelain | grep supabase/migrations; then
            echo "migrations_created=true" >> $GITHUB_OUTPUT
            echo "📦 New migration files detected"
            git status --porcelain | grep supabase/migrations
          else
            echo "migrations_created=false" >> $GITHUB_OUTPUT
            echo "✅ No migrations needed - schema is in sync"
          fi

      - name: Create Migration PR
        if: steps.check_migrations.outputs.migrations_created == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "feat(migrations): capture remote schema changes"
          branch: migrations/remote-diff-${{ github.run_number }}
          title: "🔄 Migration: Remote Schema Changes"
          body: |
            🤖 **Automated migration from remote schema changes**
            
            This PR contains new migration files generated from changes detected in the remote Supabase database.
            
            **⚠️ Important: Review Before Merging**
            - Carefully review all migration files in `supabase/migrations/`
            - Verify the changes match expected schema modifications
            - Test migrations in a staging environment first
            - Ensure migrations are idempotent and reversible
            
            **How to test locally:**
            ```bash
            npm run schema:apply  # Apply to local dev database
            npm run db:reset      # Reset and test from scratch
            ```
            
            **Migration files:**
            $(find supabase/migrations -name "*.sql" -newer HEAD~1 2>/dev/null | xargs -I {} basename {} || echo "See files changed in this PR")
            
            **Generated on:** $(date -u)
          delete-branch: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: No changes summary
        if: steps.check_migrations.outputs.migrations_created == 'false'
        run: |
          echo "::notice::No schema changes detected. Remote database is in sync with local state."