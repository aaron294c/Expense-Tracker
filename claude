#!/usr/bin/env python3
import sys
import argparse
from pathlib import Path
from datetime import datetime

# Fix: Add the current directory to Python path
current_dir = Path(__file__).parent.absolute()
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / "agents"))

try:
    from agents.orchestrator import AgentOrchestrator
except ImportError as e:
    print(f"❌ Import Error: {e}")
    print(f"📁 Current directory: {current_dir}")
    print(f"🔍 Looking for: agents/orchestrator.py")
    print("🛠️  Try running from the project root directory")
    sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Claude Autonomous Coding Agent")
    parser.add_argument("task", nargs="*", help="Task description")
    parser.add_argument("--max-turns", type=int, default=30)
    parser.add_argument("--max-minutes", type=int, default=45)
    parser.add_argument("--debug", action="store_true")
    
    args = parser.parse_args()
    
    if not args.task:
        parser.print_help()
        return 1
    
    task_description = " ".join(args.task)
    run_id = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    print(f"🤖 Claude Agent starting...")
    print(f"📋 Task: {task_description}")
    print(f"🔄 Run ID: {run_id}")
    print("-" * 60)
    
    try:
        orchestrator = AgentOrchestrator(
            run_id=run_id,
            max_turns=args.max_turns,
            max_minutes=args.max_minutes,
            debug=args.debug
        )
        
        result = orchestrator.execute_task(task_description)
        
        if result["success"]:
            print("✅ Task completed successfully!")
            if result.get("pr_url"):
                print(f"🔗 PR created: {result['pr_url']}")
        else:
            print("❌ Task failed or stopped early")
            print(f"🔍 Reason: {result.get('reason', 'Unknown')}")
            return 1
            
    except KeyboardInterrupt:
        print("\n⏹️  Task interrupted by user")
        return 1
    except Exception as e:
        print(f"💥 Error: {e}")
        if args.debug:
            import traceback
            traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())
