{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "db:new": "npx supabase migration new",
    "db:push": "npx supabase db push",
    "db:pull": "npx supabase db pull",
    "db:seed": "npx supabase db seed --file supabase/seed_ui_min.sql",
    "db:reset": "npx supabase db reset",
    "db:types": "npx supabase gen types typescript --project-id rtgiakccgqqumddeyixs --schema public > src/types/supabase.ts",
    "db:dump": "npx supabase db dump --file supabase/schema_dump.sql",
    "db:link": "npx supabase link --project-ref rtgiakccgqqumddeyixs",
    "db:status": "npx supabase status",
    "db:stop": "npx supabase stop",
    "db:start": "npx supabase start",
    "schema:link": "echo 'Using project-id instead of linking for schema operations'",
    "schema:dump": "echo 'Schema dump requires database connection - using types generation instead'",
    "types": "npx supabase gen types typescript --project-id rtgiakccgqqumddeyixs --schema public > supabase/types/database.types.ts",
    "schema:pull": "npm run types",
    "schema:diff": "echo 'Schema diff requires linked project - use Supabase Dashboard for schema changes'",
    "schema:apply": "npx supabase db reset --local || true && npx supabase db start || true && npx supabase db reset --local",
    "prisma:pull": "node -e \"try{require('fs').accessSync('prisma/schema.prisma');process.exit(0)}catch(e){process.exit(1)}\" && npx prisma db pull || true"
  }
}